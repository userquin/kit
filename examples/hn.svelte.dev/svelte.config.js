import netlify from '@sveltejs/adapter-netlify';
import { VitePWA } from 'vite-plugin-pwa';

export default {
	kit: {
		adapter: netlify(),
		target: '#svelte',
		vite: {
			plugins: [
				VitePWA({
					// force base to `/`: if not included then the base will be `/_app/`
					base: '/',
					// force scope to `/`: if not included then the scope will be `/_app/`
					scope: '/',
					// we are using an adapter, so just use its build directory to just traverse the resources
					// and regenerate the sw precache manifest (self.__WB_MANIFEST) from this directory
					// if you remove the adapter, then change this to './.svelte-kit/output/client'
					srcDir: './build',
					// the generated sw.js file will go to this directory
					outDir: './.svelte-kit/output/client',
					// the generated sw.js file not minified => this is for vite
					mode: 'development',
					// prompt ofr update: to use auto update just change the value to autoUpdate
					registerType: 'prompt',
					// we need to exclude the icons, problem with the vite `publicDir` directory and svelte-kit `assets
					// the pwa plugin will only resolve static assets on vite `publicDir` using `fast-glob`
					includeManifestIcons: false,
					// the manifest.webmanifest generated by pwa plugin will be on `/_app/` directory
					// and since it is generated after build (post/build rollup plugin), svelte-kit
					// will not include the manifest.webmanifest file on its manifest => 404
					// so, we move the content to the `manifest.json` file on `static` directory
					// and disable here its generation
					manifest: false,
					// we need to configure properly workbox entry
					workbox: {
						// the generated sw.js file not minified => this is for workbox
						mode: 'development',
						// since there is no way to create `index.html` we just link ti the `base` path
						navigateFallback: '/',
						// we are using an adapter, so just use its build directory to just traverse the resources
						// and regenerate the sw precache manifest (self.__WB_MANIFEST) from this directory
						// if you remove the adapter, then change this to './.svelte-kit/output/client'
						globDirectory: './build/',
						// change the default pattern from workbox: only html, js and css files
						globPatterns: ['robots.txt', '**/*.{js,css,html,ico,png,webp,svg,woff2,webmanifest}'],
						// since the sw and the workbox-** helper files are generated after build
						// and we just run the plugin again, we need to exclude from the sq precache manifest
						globIgnores: [
							'**/sw*', '**/workbox-*'
						],
						// since we are using an adapter we need to map the html files to its logic name:
						// just remove the final path
						// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
						manifestTransforms: [async(entries) => {
							// manifest.webmanifest is added always by pwa plugin, so we remove it
							let indexFound = false;
							const manifest = entries.filter(({ url }) =>
								url !== 'sw.js' && !url.startsWith('workbox-')
							).map((e) => {
								const url = e.url;
								if (url) {
									if (url.endsWith('.html')) {
										if (url === 'index.html') {
											e.url = '/';
											indexFound = true;
											console.log(`${url} => ${e.url}`);
										} else {
											e.url = `/${url.substring(0, url.lastIndexOf('/'))}`;
											console.log(`${url} => ${e.url}`);
										}
									}
								}

								return e;
							});
							// we need to include `/` to work offline
							if (!indexFound) {
								manifest.push({ url: '/', revision: `${Date.now()}` });
							}
							return { manifest };
						}]
					}
				})
			]
		}
	}
};
